using System.Collections.Generic;
using Sfs2X.Entities.Managers;
using Sfs2X.Entities.Variables;

namespace Sfs2X.Entities
{
	/// <summary>
	/// The Room interface defines all the methods and properties that an object representing a SmartFoxServer Room entity exposes.
	/// </summary>
	///
	/// <remarks>
	/// In the SmartFoxServer 2X client API this interface is implemented by the <see cref="T:Sfs2X.Entities.SFSRoom" /> class. Read the class description for additional informations.
	/// </remarks>
	///
	/// <seealso cref="T:Sfs2X.Entities.SFSRoom" />
	public interface Room
	{
		/// <summary>
		/// Indicates the id of this Room.
		/// </summary>
		///
		/// <remarks>
		/// The id is unique and it is generated by the server when the Room is created.
		/// </remarks>
		int Id { get; }

		/// <summary>
		/// Indicates the name of this Room.
		/// </summary>
		///
		/// <remarks>
		/// Two Rooms in the same Zone can't have the same name.
		/// <para />
		/// <b>NOTE</b>: setting this property manually has no effect on the server and can disrupt the API functioning. Use the <see cref="T:Sfs2X.Requests.ChangeRoomNameRequest" /> request instead.
		/// </remarks>
		///
		/// <seealso cref="T:Sfs2X.Requests.ChangeRoomNameRequest" />
		string Name { get; set; }

		/// <summary>
		/// Returns the Room Group name.
		/// </summary>
		///
		/// <remarks>
		/// Each Group is identified by a unique string (its name or id) and it represents a different "container" for Rooms.
		/// <para />
		/// Room Groups enable developers to organize Rooms under different types or categories and let clients select only those Groups they are interested in,
		/// in order to receive their events only. This is done via the <see cref="T:Sfs2X.Requests.SubscribeRoomGroupRequest" /> and <see cref="T:Sfs2X.Requests.UnsubscribeRoomGroupRequest" /> requests.
		/// <para />
		/// The default value is <c>default</c>.
		/// </remarks>
		///
		/// <seealso cref="T:Sfs2X.Requests.SubscribeRoomGroupRequest" />
		/// <seealso cref="T:Sfs2X.Requests.UnsubscribeRoomGroupRequest" />
		string GroupId { get; }

		/// <summary>
		/// Indicates whether the client joined this Room or not.
		/// </summary>
		///
		/// <remarks>
		/// <b>NOTE</b>: setting this property manually has no effect on the server and can disrupt the API functioning. Use the <see cref="T:Sfs2X.Requests.JoinRoomRequest" /> request to join a new Room instead.
		/// </remarks>
		///
		/// <seealso cref="T:Sfs2X.Requests.JoinRoomRequest" />
		bool IsJoined { get; set; }

		/// <summary>
		/// Indicates whether this is a Game Room or not.
		/// </summary>
		///
		/// <remarks>
		/// <b>NOTE</b>: setting this property manually has no effect on the server and can disrupt the API functioning. This flag must be set when creating the Room.
		/// </remarks>
		bool IsGame { get; set; }

		/// <summary>
		/// Indicates whether this Room is hidden or not.
		/// </summary>
		///
		/// <remarks>
		/// This is a utility flag that can be used by developers to hide certain Rooms from the interface of their application.
		/// <para />
		/// <b>NOTE</b>: setting this property manually has no effect on the server and can disrupt the API functioning. This flag must be set when creating the Room.
		/// </remarks>
		bool IsHidden { get; set; }

		/// <summary>
		/// Indicates whether this Room requires a password to be joined or not.
		/// </summary>
		///
		/// <remarks>
		/// <b>NOTE</b>: setting this property manually has no effect on the server and can disrupt the API functioning.
		/// This flag depends on the Room's password set when the Room is created or by means of the <seealso cref="T:Sfs2X.Requests.ChangeRoomPasswordStateRequest" /> request.
		/// </remarks>
		///
		/// <seealso cref="T:Sfs2X.Requests.ChangeRoomPasswordStateRequest" />
		bool IsPasswordProtected { get; set; }

		/// <exclude />
		bool IsManaged { get; set; }

		/// <summary>
		/// Returns the current number of users in this Room.
		/// </summary>
		///
		/// <remarks>
		/// In case of Game Rooms, this is the number of players.
		/// <para />
		/// <b>NOTE</b>: setting this property manually has no effect on the server and can disrupt the API functioning. This flag depends on the Room state.
		/// </remarks>
		int UserCount { get; set; }

		/// <summary>
		/// Returns the maximum number of users allowed in this Room.
		/// </summary>
		///
		/// <remarks>
		/// In case of Game Rooms, this is the maximum number of players.
		/// <para />
		/// <b>NOTE</b>: setting this property manually has no effect on the server and can disrupt the API functioning. This flag must be set when creating the Room.
		/// </remarks>
		int MaxUsers { get; set; }

		/// <summary>
		/// Returns the current number of spectators in this Room (Game Rooms only).
		/// </summary>
		///
		/// <remarks>
		/// <b>NOTE</b>: setting this property manually has no effect on the server and can disrupt the API functioning. This flag depends on the Room state.
		/// </remarks>
		int SpectatorCount { get; set; }

		/// <summary>
		/// Returns the maximum number of spectators allowed in this Room (Game Rooms only).
		/// </summary>
		///
		/// <remarks>
		/// <b>NOTE</b>: setting this property manually has no effect on the server and can disrupt the API functioning. This flag must be set when creating the Game Room.
		/// </remarks>
		int MaxSpectators { get; set; }

		/// <summary>
		/// Returns the maximum amount of users, including spectators, that can be contained in this Room.
		/// </summary> 
		int Capacity { get; }

		/// <summary>
		/// Returns a list of User objects representing all the users currently inside this Room.
		/// </summary>
		List<User> UserList { get; }

		/// <summary>
		/// Returns a list of User objects representing the players currently inside this Room (Game Rooms only).
		/// </summary>
		List<User> PlayerList { get; }

		/// <summary>
		/// Returns a list of User objects representing the spectators currently inside this Room (Game Rooms only).
		/// </summary>
		List<User> SpectatorList { get; }

		/// <summary>
		/// Defines a generic utility object that can be used to store custom Room data.
		/// </summary>
		///
		/// <remarks>
		/// The values added to this object are for client-side use only and are never transmitted to the server or to the other clients.
		/// </remarks>
		Dictionary<object, object> Properties { get; set; }

		/// <summary>
		/// Returns a reference to the Room Manager which manages this Room.
		/// </summary>
		///
		/// <remarks>
		/// <b>NOTE</b>: setting this property manually has no effect on the server and can disrupt the API functioning.
		/// </remarks>
		IRoomManager RoomManager { get; set; }

		/// <exclude />
		void AddUser(User user);

		/// <exclude />
		void RemoveUser(User user);

		/// <summary>
		/// Indicates whether the specified user is currently inside this Room or not.
		/// </summary>
		///
		/// <param name="user">The object representing the user whose presence in this Room must be checked.</param>
		///
		/// <returns><c>true</c> if the user is inside this Room; false otherwise.</returns>
		bool ContainsUser(User user);

		/// <summary>
		/// Retrieves a User object from its name property.
		/// </summary>
		///
		/// <param name="name">The name of the user to be found.</param>
		///
		/// <returns>The object representing the user, or <c>null</c> if no user with the passed name exists in this Room.</returns>
		User GetUserByName(string name);

		/// <summary>
		/// Retrieves a User object from its id property.
		/// </summary>
		///
		/// <param name="id">The id of the user to be found.</param>
		///
		/// <returns>The object representing the user, or <c>null</c> if no user with the passed id exists in this Room.</returns>
		User GetUserById(int id);

		/// <summary>
		/// Retrieves a Room Variable from its name.
		/// </summary>
		///
		/// <param name="name">The name of the Room Variable to be retrieved.</param>
		///
		/// <returns>The object representing the Room Variable, or <c>null</c> if no Room Variable with the passed name exists in this Room.</returns>
		///
		/// <seealso cref="T:Sfs2X.Requests.SetRoomVariablesRequest" />
		RoomVariable GetVariable(string name);

		/// <summary>
		/// Retrieves all the Room Variables of this Room.
		/// </summary>
		///
		/// <returns>A list of objects representing the Room Variables associated with this Room.</returns>
		///
		/// <seealso cref="T:Sfs2X.Requests.SetRoomVariablesRequest" />
		List<RoomVariable> GetVariables();

		/// <exclude />
		void SetVariable(RoomVariable roomVariable);

		/// <exclude />
		void SetVariables(ICollection<RoomVariable> roomVariables);

		/// <summary>
		/// Indicates whether this Room has the specified Room Variable set or not.
		/// </summary>
		///
		/// <param name="name"> The name of the Room Variable whose existance in this Room must be checked.</param>
		///
		/// <returns><c>true</c> if a Room Variable with the passed name exists in this Room.</returns>
		///
		/// <seealso cref="T:Sfs2X.Entities.Variables.RoomVariable" />
		bool ContainsVariable(string name);

		/// <exclude />
		void Merge(Room anotherRoom);
	}
}
