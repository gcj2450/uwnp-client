using System.Collections.Generic;
using Sfs2X.Entities.Data;
using Sfs2X.Entities.Managers;
using Sfs2X.Entities.Variables;

namespace Sfs2X.Entities
{
	/// <summary>
	/// The User interface defines all the methods and properties that an object representing a SmartFoxServer User entity exposes.
	/// </summary>
	///
	/// <remarks>
	/// In the SmartFoxServer 2X client API this interface is implemented by the <see cref="T:Sfs2X.Entities.SFSUser" /> class. Read the class description for additional informations.
	/// </remarks>
	///
	/// <seealso cref="T:Sfs2X.Entities.SFSUser" />
	public interface User
	{
		/// <summary>
		/// Indicates the id of this user.
		/// </summary>
		///
		/// <remarks>
		/// The id is unique and it is generated by the server when the user is created.
		/// </remarks>
		int Id { get; }

		/// <summary>
		/// Indicates the name of this user.
		/// </summary>
		///
		/// <remarks>
		/// Two users in the same Zone can't have the same name.
		/// </remarks>
		string Name { get; }

		/// <summary>
		/// Returns the id of this user as a player in a Game Room.
		/// </summary>
		///
		/// <remarks>
		/// This property differs from <see cref="P:Sfs2X.Entities.User.Id" /> property and it used to indicate which player number is assigned to a user inside a Game Room.
		/// For example, in a Game Room for 5 players the first client joining it will have its <em>playerId</em> equal to 1, the second will have it equal to 2 and so forth.
		/// When a user leaves the Room the player slot is freed up and the next user joining the Room will take it.
		/// <para />
		/// This property applies to Game Rooms only; in standard Rooms it is always 0. Also, in Game Rooms a <em>playerId</em> value lower than 0 indicates that the user is a spectator.
		/// <para />
		/// If the user is inside multiple Game Rooms at the same time, a different <em>playerId</em> value will be assigned to him in each Room.
		/// In this case this property returns the value corresponding to the last joined Room; in order to obtain the <em>playerId</em> value in a specific Room, use the <see cref="M:Sfs2X.Entities.User.GetPlayerId(Sfs2X.Entities.Room)" /> method.
		/// </remarks>
		///
		/// <seealso cref="M:Sfs2X.Entities.User.GetPlayerId(Sfs2X.Entities.Room)" />
		int PlayerId { get; }

		/// <summary>
		/// Indicates whether this user is a player (playerId greater than 0) in the last joined Room or not.
		/// </summary>
		///
		/// <remarks>
		/// Non-Game Rooms always return <c>false</c>.
		/// <para />
		/// If the user is inside multiple Game Rooms at the same time, use the <see cref="M:Sfs2X.Entities.User.IsPlayerInRoom(Sfs2X.Entities.Room)" /> method.
		/// </remarks>
		///
		/// <seealso cref="M:Sfs2X.Entities.User.IsPlayerInRoom(Sfs2X.Entities.Room)" />
		/// <seealso cref="P:Sfs2X.Entities.User.PlayerId" />
		/// <seealso cref="P:Sfs2X.Entities.User.IsSpectator" />
		bool IsPlayer { get; }

		/// <summary>
		/// Indicates whether this user is a spectator (playerId lower than 0) in the last joined Room or not.
		/// </summary>
		///
		/// <remarks>
		/// Non-Game Rooms always return <c>false</c>.
		/// <para />
		/// If the user is inside multiple Game Rooms at the same time, use the <see cref="M:Sfs2X.Entities.User.IsSpectatorInRoom(Sfs2X.Entities.Room)" /> method.
		/// </remarks>
		///
		/// <seealso cref="M:Sfs2X.Entities.User.IsSpectatorInRoom(Sfs2X.Entities.Room)" />
		/// <seealso cref="P:Sfs2X.Entities.User.IsPlayer" />
		bool IsSpectator { get; }

		/// <summary>
		/// Returns the id which identifies the privilege level of this user.
		/// </summary>
		///
		/// <remarks>
		/// <b>NOTE</b>: setting this property manually has no effect on the server and can disrupt the API functioning. Privileges are assigned to the user by the server when the user logs in.
		/// </remarks>
		///
		/// <seealso cref="T:Sfs2X.Entities.UserPrivileges" />
		int PrivilegeId { get; set; }

		/// <summary>
		/// Returns a reference to the User Manager which manages this user.
		/// </summary>
		///
		/// <remarks>
		/// <b>NOTE</b>: setting this property manually has no effect on the server and can disrupt the API functioning.
		/// </remarks>
		IUserManager UserManager { get; set; }

		/// <summary>
		/// Indicates if this User object represents the current client.
		/// </summary>
		///
		/// <seealso cref="P:Sfs2X.SmartFox.MySelf" />
		bool IsItMe { get; }

		/// <summary>
		/// Defines a generic utility object that can be used to store custom user data.
		/// </summary>
		///
		/// <remarks>
		/// The values added to this object are for client-side use only and are never transmitted to the server or to the other clients.
		/// </remarks>
		Dictionary<string, object> Properties { get; set; }

		/// <summary>
		/// Returns the entry point of this user in the current user's AoI.
		/// </summary>
		///
		/// <remarks>
		/// The returned coordinates are those that the user had when his presence in the current user's Area of Interest was last notified by a <see cref="F:Sfs2X.Core.SFSEvent.PROXIMITY_LIST_UPDATE">PROXIMITY_LIST_UPDATE</see> event.
		/// This field is populated only if the user joined a Room of type MMORoom and this is configured to receive such data from the server.
		/// </remarks>
		///
		/// <seealso cref="P:Sfs2X.Requests.MMO.MMORoomSettings.SendAOIEntryPoint" />
		/// <seealso cref="F:Sfs2X.Core.SFSEvent.PROXIMITY_LIST_UPDATE" />
		Vec3D AOIEntryPoint { get; set; }

		/// <summary>
		/// Returns the playerId value of this user in the passed Room.
		/// </summary>
		///
		/// <remarks>
		/// See the <see cref="P:Sfs2X.Entities.User.PlayerId" /> property description for more informations.
		/// </remarks>
		///
		/// <param name="room">The object representing the Room to retrieve the player id from.</param>
		///
		/// <returns>The player id of this user in the passed Room.</returns>
		///
		/// <seealso cref="P:Sfs2X.Entities.User.PlayerId" />
		int GetPlayerId(Room room);

		/// <exclude />
		void SetPlayerId(int id, Room room);

		/// <exclude />
		void RemovePlayerId(Room room);

		/// <summary>
		/// Indicates whether this user logged in as a guest or not.
		/// </summary>
		///
		/// <remarks>
		/// Guest users have this property set to <see cref="F:Sfs2X.Entities.UserPrivileges.GUEST" />.
		/// </remarks>
		///
		/// <returns><c>true</c> if this user is a guest.</returns>
		///
		/// <seealso cref="P:Sfs2X.Entities.User.PrivilegeId" />
		bool IsGuest();

		/// <summary>
		/// Indicates whether this user logged in as a standard user or not.
		/// </summary>
		///
		/// <remarks>
		/// Standard users have this property set to <see cref="F:Sfs2X.Entities.UserPrivileges.STANDARD" />.
		/// </remarks>
		///
		/// <returns><c>true</c> if this user is a standard user.</returns>
		///
		/// <seealso cref="P:Sfs2X.Entities.User.PrivilegeId" />
		bool IsStandardUser();

		/// <summary>
		/// Indicates whether this user logged in as a moderator or not.
		/// </summary>
		///
		/// <remarks>
		/// Moderator users have this property set to <see cref="F:Sfs2X.Entities.UserPrivileges.MODERATOR" />.
		/// </remarks>
		///
		/// <returns><c>true</c> if this user is a moderator.</returns>
		///
		/// <seealso cref="P:Sfs2X.Entities.User.PrivilegeId" />
		bool IsModerator();

		/// <summary>
		/// Indicates whether this user logged in as an administrator or not.
		/// </summary>
		///
		/// <remarks>
		/// Administrator users have this property set to <see cref="F:Sfs2X.Entities.UserPrivileges.ADMINISTRATOR" />.
		/// </remarks>
		///
		/// <returns><c>true</c> if this user is an administrator.</returns>
		///
		/// <seealso cref="P:Sfs2X.Entities.User.PrivilegeId" />
		bool IsAdmin();

		/// <summary>
		/// Indicates whether this user is a player (playerId greater than 0) in the passed Room or not.
		/// </summary>
		///
		/// <remarks>
		/// Non-Game Rooms always return <c>false</c>.
		/// <para />
		/// If a user can join one Game Room at a time only, use the <see cref="P:Sfs2X.Entities.User.IsPlayer" /> property.
		/// </remarks>
		///
		/// <param name="room">The object representing the Room where to check if this user is a player.</param>
		///
		/// <returns><c>true</c> if this user is a player in the passed Room.</returns>
		bool IsPlayerInRoom(Room room);

		/// <summary>
		/// Indicates whether this user is a spectator (playerId lower than 0) in the passed Room or not.
		/// </summary>
		///
		/// <remarks>
		/// Non-Game Rooms always return <c>false</c>.
		/// <para />
		/// If a user can join one Game Room at a time only, use the <see cref="P:Sfs2X.Entities.User.IsSpectator" /> property.
		/// </remarks>
		///
		/// <param name="room">The object representing the Room where to check if this user is a spectator.</param>
		/// <returns><c>true</c> if this user is a spectator in the passed Room.</returns>
		bool IsSpectatorInRoom(Room room);

		/// <summary>
		/// Indicates whether this user joined the passed Room or not.
		/// </summary>
		///
		/// <param name="room">The object representing the Room where to check the user presence.</param>
		///
		/// <returns><c>true</c> if this user is inside the passed Room.</returns>
		bool IsJoinedInRoom(Room room);

		/// <summary>
		/// Retrieves all the User Variables of this user.
		/// </summary>
		///
		/// <returns>A list of objects representing the User Variables associated with this user.</returns>
		///
		/// <seealso cref="T:Sfs2X.Requests.SetUserVariablesRequest" />
		List<UserVariable> GetVariables();

		/// <summary>
		/// Retrieves a User Variable from its name.
		/// </summary>
		///
		/// <param name="varName">The name of the User Variable to be retrieved.</param>
		///
		/// <returns>The object representing the User Variable, or <c>null</c> if no User Variable with the passed name is associated with this user.</returns>
		///
		/// <seealso cref="T:Sfs2X.Requests.SetUserVariablesRequest" />
		UserVariable GetVariable(string varName);

		/// <exclude />
		void SetVariable(UserVariable userVariable);

		/// <exclude />
		void SetVariables(ICollection<UserVariable> userVaribles);

		/// <summary>
		/// Indicates whether this user has the specified User Variable set or not.
		/// </summary>
		///
		/// <param name="name">The name of the User Variable whose existance must be checked.</param>
		///
		/// <returns><c>true</c> if a User Variable with the passed name is set for this user.</returns>
		///
		/// <seealso cref="T:Sfs2X.Entities.Variables.UserVariable" />
		bool ContainsVariable(string name);
	}
}
